{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar rowsNum = 4;\nvar columnsNum = 4;\nvar handler = false;\nvar score = 0;\nvar best = 0;\nvar field = [\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ]\n];\nvar cells = document.querySelectorAll(\".field-cell\");\nvar rows = document.querySelectorAll(\".field-row\");\nvar button = document.querySelector(\".button\");\nvar messageStart = document.querySelector(\".message-start\");\nvar messageLose = document.querySelector(\".message-lose\");\nvar messageWin = document.querySelector(\".message-win\");\nvar counter = document.querySelector(\".game-score\");\nvar bestResult = document.querySelector(\".game-best\");\nvar isRowsSlides = [];\nvar isSlides = true;\nvar filterZero = function(row) {\n    return row.filter(function(el) {\n        return el !== 0;\n    });\n};\nvar hasEmptyCell = function() {\n    return field.some(function(row) {\n        return row.some(function(el) {\n            return el === 0;\n        });\n    });\n};\nvar checkWin = function() {\n    return field.some(function(row) {\n        return row.some(function(el) {\n            return el === 2048;\n        });\n    });\n};\nvar random = function() {\n    return Math.floor(Math.random() * 4);\n};\nvar hasRowSlides = function(initRow, resultRow) {\n    return initRow.some(function(item) {\n        return initRow[item] !== resultRow[item];\n    });\n};\nfunction hasAdjacentTiles() {\n    for(var i = 0; i < rowsNum; i++)for(var j = 0; j < columnsNum; j++){\n        if (j < columnsNum - 1 && field[i][j] === field[i][j + 1]) return true;\n        if (i < rowsNum - 1 && field[i][j] === field[i + 1][j]) return true;\n    }\n    return false;\n}\nfunction generateRandomNum() {\n    if (!hasEmptyCell() || !isSlides) return;\n    var rowIndex, cellIndex;\n    do {\n        rowIndex = random();\n        cellIndex = random();\n    }while (field[rowIndex][cellIndex] !== 0);\n    if (field[rowIndex][cellIndex] === 0) {\n        var value = Math.random() < 0.9 ? 2 : 4;\n        var cell = rows[rowIndex].children[cellIndex];\n        field[rowIndex][cellIndex] = value;\n        cell.textContent = value;\n        cell.classList.add(\"field-cell--\".concat(value));\n    }\n}\nfunction updateTable() {\n    cells.forEach(function(el) {\n        el.textContent = \"\";\n        el.className = \"field-cell\";\n    });\n    for(var i = 0; i < field.length; i++)for(var k = 0; k < field[i].length; k++){\n        var cell = rows[i].children[k];\n        var value = field[i][k];\n        if (value !== 0) {\n            cell.textContent = value;\n            cell.classList.add(\"field-cell--\".concat(value));\n        }\n    }\n    counter.textContent = score;\n    bestResult.textContent = best;\n}\nfunction slide(row) {\n    var copy = _to_consumable_array(row);\n    copy = filterZero(copy);\n    for(var i = 0; i < copy.length - 1; i++)if (copy[i] === copy[i + 1]) {\n        copy[i] *= 2;\n        copy[i + 1] = 0;\n        score += copy[i];\n    }\n    copy = filterZero(copy);\n    while(copy.length < columnsNum)copy.push(0);\n    isRowsSlides.push(hasRowSlides(row, copy));\n    isSlides = isRowsSlides.includes(true);\n    return copy;\n}\nfunction slideLeft() {\n    for(var i = 0; i < rowsNum; i++){\n        var row = field[i];\n        row = slide(row);\n        field[i] = row;\n    }\n}\nfunction slideRight() {\n    for(var i = 0; i < rowsNum; i++){\n        var row = field[i];\n        row.reverse();\n        row = slide(row);\n        row.reverse();\n        field[i] = row;\n    }\n}\nfunction fieldCombine(cell, num, row) {\n    for(var r = 0; r <= num; r++)field[r][cell] = row[r];\n}\nfunction slideUp() {\n    for(var i = 0; i < columnsNum; i++){\n        var row = [\n            field[0][i],\n            field[1][i],\n            field[2][i],\n            field[3][i]\n        ];\n        row = slide(row);\n        fieldCombine(i, 3, row);\n    }\n}\nfunction slideDown() {\n    for(var i = 0; i < columnsNum; i++){\n        var row = [\n            field[0][i],\n            field[1][i],\n            field[2][i],\n            field[3][i]\n        ];\n        row.reverse();\n        row = slide(row);\n        row.reverse();\n        fieldCombine(i, 3, row);\n    }\n}\nbutton.addEventListener(\"click\", function() {\n    if (!button.classList.contains(\"restart\")) {\n        button.className = \"button restart\";\n        button.textContent = \"Restart\";\n        messageStart.classList.add(\"hidden\");\n    } else {\n        field.forEach(function(el) {\n            return el.fill(0);\n        });\n        if (score > best) {\n            best = score;\n            score = 0;\n        }\n        score = 0;\n        updateTable();\n        messageLose.classList.add(\"hidden\");\n    }\n    handler = true;\n    generateRandomNum();\n    generateRandomNum();\n});\ndocument.addEventListener(\"keydown\", function(e) {\n    if (handler) {\n        e.preventDefault();\n        switch(e.key){\n            case \"ArrowLeft\":\n                slideLeft();\n                generateRandomNum();\n                break;\n            case \"ArrowRight\":\n                slideRight();\n                generateRandomNum();\n                break;\n            case \"ArrowUp\":\n                slideUp();\n                generateRandomNum();\n                break;\n            case \"ArrowDown\":\n                slideDown();\n                generateRandomNum();\n                break;\n        }\n        isRowsSlides = [];\n        updateTable();\n        if (checkWin()) {\n            messageWin.classList.remove(\"hidden\");\n            handler = false;\n        }\n        if (!hasEmptyCell() && !hasAdjacentTiles()) {\n            messageLose.classList.remove(\"hidden\");\n            handler = false;\n        }\n    }\n});\n\n//# sourceMappingURL=index.290e2779.js.map\n","'use strict';\n\nconst rowsNum = 4;\nconst columnsNum = 4;\nlet handler = false;\nlet score = 0;\nlet best = 0;\n\nconst field = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nconst cells = document.querySelectorAll('.field-cell');\nconst rows = document.querySelectorAll('.field-row');\nconst button = document.querySelector('.button');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst counter = document.querySelector('.game-score');\nconst bestResult = document.querySelector('.game-best');\n\nlet isRowsSlides = [];\nlet isSlides = true;\n\nconst filterZero = (row) => row.filter(el => el !== 0);\nconst hasEmptyCell = () => field.some(row => row.some(el => el === 0));\nconst checkWin = () => field.some(row => row.some(el => el === 2048));\nconst random = () => Math.floor(Math.random() * 4);\nconst hasRowSlides = (initRow, resultRow) => initRow.some(item => initRow[item] !== resultRow[item]);\n\nfunction hasAdjacentTiles() {\n  for (let i = 0; i < rowsNum; i++) {\n    for (let j = 0; j < columnsNum; j++) {\n      if (j < columnsNum - 1 && field[i][j] === field[i][j + 1]) {\n        return true;\n      }\n\n      if (i < rowsNum - 1 && field[i][j] === field[i + 1][j]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction generateRandomNum() {\n  if (!hasEmptyCell() || !isSlides) {\n    return;\n  }\n\n  let rowIndex, cellIndex;\n\n  do {\n    rowIndex = random();\n    cellIndex = random();\n  } while (field[rowIndex][cellIndex] !== 0);\n\n  if (field[rowIndex][cellIndex] === 0) {\n    const value = Math.random() < 0.9 ? 2 : 4;\n    const cell = rows[rowIndex].children[cellIndex];\n\n    field[rowIndex][cellIndex] = value;\n    cell.textContent = value;\n    cell.classList.add(`field-cell--${value}`);\n  }\n}\n\nfunction updateTable() {\n  cells.forEach(el => {\n    el.textContent = '';\n    el.className = 'field-cell';\n  });\n\n  for (let i = 0; i < field.length; i++) {\n    for (let k = 0; k < field[i].length; k++) {\n      const cell = rows[i].children[k];\n      const value = field[i][k];\n\n      if (value !== 0) {\n        cell.textContent = value;\n        cell.classList.add(`field-cell--${value}`);\n      }\n    }\n  }\n\n  counter.textContent = score;\n  bestResult.textContent = best;\n}\n\nfunction slide(row) {\n  let copy = [...row];\n\n  copy = filterZero(copy);\n\n  for (let i = 0; i < copy.length - 1; i++) {\n    if (copy[i] === copy[i + 1]) {\n      copy[i] *= 2;\n      copy[i + 1] = 0;\n      score += copy[i];\n    }\n  }\n\n  copy = filterZero(copy);\n\n  while (copy.length < columnsNum) {\n    copy.push(0);\n  }\n\n  isRowsSlides.push(hasRowSlides(row, copy));\n  isSlides = isRowsSlides.includes(true)\n\n  return copy;\n}\n\nfunction slideLeft() {\n  for (let i = 0; i < rowsNum; i++) {\n    let row = field[i];\n\n    row = slide(row);\n    field[i] = row;\n  }\n}\n\nfunction slideRight() {\n  for (let i = 0; i < rowsNum; i++) {\n    let row = field[i];\n\n    row.reverse();\n    row = slide(row);\n    row.reverse();\n    field[i] = row;\n  }\n}\n\nfunction fieldCombine(cell, num, row) {\n  for (let r = 0; r <= num; r++) {\n    field[r][cell] = row[r];\n  }\n}\n\nfunction slideUp() {\n  for (let i = 0; i < columnsNum; i++) {\n    let row = [field[0][i], field[1][i], field[2][i], field[3][i]];\n\n    row = slide(row);\n    fieldCombine(i, 3, row);\n  }\n}\n\nfunction slideDown() {\n  for (let i = 0; i < columnsNum; i++) {\n    let row = [field[0][i], field[1][i], field[2][i], field[3][i]];\n\n    row.reverse();\n    row = slide(row);\n    row.reverse();\n    fieldCombine(i, 3, row);\n  }\n}\n\nbutton.addEventListener('click', () => {\n  if (!button.classList.contains('restart')) {\n    button.className = 'button restart';\n    button.textContent = 'Restart';\n    messageStart.classList.add('hidden');\n  } else {\n    field.forEach(el => el.fill(0));\n\n    if (score > best) {\n      best = score;\n      score = 0;\n    }\n\n    score = 0;\n    updateTable();\n    messageLose.classList.add('hidden');\n  }\n\n  handler = true;\n\n  generateRandomNum();\n  generateRandomNum();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (handler) {\n    e.preventDefault();\n\n    switch (e.key) {\n      case 'ArrowLeft':\n        slideLeft();\n        generateRandomNum();\n        break;\n      case 'ArrowRight':\n        slideRight();\n        generateRandomNum();\n        break;\n      case 'ArrowUp':\n        slideUp();\n        generateRandomNum();\n        break;\n      case 'ArrowDown':\n        slideDown();\n        generateRandomNum();\n        break;\n    }\n\n    isRowsSlides = [];\n    updateTable();\n\n    if (checkWin()) {\n      messageWin.classList.remove('hidden');\n      handler = false;\n    }\n\n    if (!hasEmptyCell() && !hasAdjacentTiles()) {\n      messageLose.classList.remove('hidden');\n      handler = false;\n    }\n  }\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","handler","score","best","field","cells","document","querySelectorAll","rows","button","querySelector","messageStart","messageLose","messageWin","counter","bestResult","isRowsSlides","isSlides","filterZero","row","filter","el","hasEmptyCell","some","random","Math","floor","generateRandomNum","rowIndex","cellIndex","value","cell","children","textContent","classList","add","concat","updateTable","forEach","className","k","slide","resultRow","copy","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","push","initRow","item","includes","fieldCombine","num","r","addEventListener","contains","fill","e","preventDefault","key","slideLeft","slideRight","reverse","slideUp","slideDown","remove","hasAdjacentTiles","j","columnsNum","rowsNum"],"version":3,"file":"index.290e2779.js.map"}