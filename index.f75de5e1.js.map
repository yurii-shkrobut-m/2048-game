{"mappings":"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","sources":["src/scripts/main.js"],"sourcesContent":["'use strict';\n\nconst rowsNum = 4;\nconst columnsNum = 4;\nlet handler = false;\nlet score = 0;\nlet best = 0;\n\nconst field = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nconst cells = document.querySelectorAll('.field-cell');\nconst rows = document.querySelectorAll('.field-row');\nconst button = document.querySelector('.button');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst counter = document.querySelector('.game-score');\nconst bestResult = document.querySelector('.game-best');\n\nlet isRowsSlides = [];\nlet isSlides = true;\n\nconst filterZero = (row) => row.filter(el => el !== 0);\nconst hasEmptyCell = () => field.some(row => row.some(el => el === 0));\nconst checkWin = () => field.some(row => row.some(el => el === 2048));\nconst random = () => Math.floor(Math.random() * 4);\nconst hasRowSlides = (initRow, resultRow) => initRow.some(item => initRow[item] !== resultRow[item]);\n\nfunction hasAdjacentTiles() {\n  for (let i = 0; i < rowsNum; i++) {\n    for (let j = 0; j < columnsNum; j++) {\n      if (j < columnsNum - 1 && field[i][j] === field[i][j + 1]) {\n        return true;\n      }\n\n      if (i < rowsNum - 1 && field[i][j] === field[i + 1][j]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction generateRandomNum() {\n  if (!hasEmptyCell() || !isSlides) {\n    return;\n  }\n\n  let rowIndex, cellIndex;\n\n  do {\n    rowIndex = random();\n    cellIndex = random();\n  } while (field[rowIndex][cellIndex] !== 0);\n\n  if (field[rowIndex][cellIndex] === 0) {\n    const value = Math.random() < 0.9 ? 2 : 4;\n    const cell = rows[rowIndex].children[cellIndex];\n\n    field[rowIndex][cellIndex] = value;\n    cell.textContent = value;\n    cell.classList.add(`field-cell--${value}`);\n  }\n}\n\nfunction updateTable() {\n  cells.forEach(el => {\n    el.textContent = '';\n    el.className = 'field-cell';\n  });\n\n  for (let i = 0; i < field.length; i++) {\n    for (let k = 0; k < field[i].length; k++) {\n      const cell = rows[i].children[k];\n      const value = field[i][k];\n\n      if (value !== 0) {\n        cell.textContent = value;\n        cell.classList.add(`field-cell--${value}`);\n      }\n    }\n  }\n\n  counter.textContent = score;\n  bestResult.textContent = best;\n}\n\nfunction slide(row) {\n  let copy = [...row];\n\n  copy = filterZero(copy);\n\n  for (let i = 0; i < copy.length - 1; i++) {\n    if (copy[i] === copy[i + 1]) {\n      copy[i] *= 2;\n      copy[i + 1] = 0;\n      score += copy[i];\n    }\n  }\n\n  copy = filterZero(copy);\n\n  while (copy.length < columnsNum) {\n    copy.push(0);\n  }\n\n  isRowsSlides.push(hasRowSlides(row, copy));\n  isSlides = isRowsSlides.includes(true)\n\n  return copy;\n}\n\nfunction slideLeft() {\n  for (let i = 0; i < rowsNum; i++) {\n    let row = field[i];\n\n    row = slide(row);\n    field[i] = row;\n  }\n}\n\nfunction slideRight() {\n  for (let i = 0; i < rowsNum; i++) {\n    let row = field[i];\n\n    row.reverse();\n    row = slide(row);\n    row.reverse();\n    field[i] = row;\n  }\n}\n\nfunction fieldCombine(cell, num, row) {\n  for (let r = 0; r <= num; r++) {\n    field[r][cell] = row[r];\n  }\n}\n\nfunction slideUp() {\n  for (let i = 0; i < columnsNum; i++) {\n    let row = [field[0][i], field[1][i], field[2][i], field[3][i]];\n\n    row = slide(row);\n    fieldCombine(i, 3, row);\n  }\n}\n\nfunction slideDown() {\n  for (let i = 0; i < columnsNum; i++) {\n    let row = [field[0][i], field[1][i], field[2][i], field[3][i]];\n\n    row.reverse();\n    row = slide(row);\n    row.reverse();\n    fieldCombine(i, 3, row);\n  }\n}\n\nbutton.addEventListener('click', () => {\n  if (!button.classList.contains('restart')) {\n    button.className = 'button restart';\n    button.textContent = 'Restart';\n    messageStart.classList.add('hidden');\n  } else {\n    field.forEach(el => el.fill(0));\n\n    if (score > best) {\n      best = score;\n      score = 0;\n    }\n\n    score = 0;\n    updateTable();\n    messageLose.classList.add('hidden');\n  }\n\n  handler = true;\n\n  generateRandomNum();\n  generateRandomNum();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (handler) {\n    e.preventDefault();\n\n    switch (e.key) {\n      case 'ArrowLeft':\n        slideLeft();\n        generateRandomNum();\n        break;\n      case 'ArrowRight':\n        slideRight();\n        generateRandomNum();\n        break;\n      case 'ArrowUp':\n        slideUp();\n        generateRandomNum();\n        break;\n      case 'ArrowDown':\n        slideDown();\n        generateRandomNum();\n        break;\n    }\n\n    isRowsSlides = [];\n    updateTable();\n\n    if (checkWin()) {\n      messageWin.classList.remove('hidden');\n      handler = false;\n    }\n\n    if (!hasEmptyCell() && !hasAdjacentTiles()) {\n      messageLose.classList.remove('hidden');\n      handler = false;\n    }\n  }\n});\n"],"names":[],"version":3,"file":"index.f75de5e1.js.map","sourceRoot":"/__parcel_source_root/"}